import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import yt_dlp

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TOKEN")  # –±–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Å—ã–ª–æ–∫, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–µ–∑–∞—Ç—å –∏ –∫–∞—á–∞—Ç—å
user_links = {}

# —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å YouTube.\n"
                         "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")

# –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
@dp.message_handler(lambda msg: "youtube.com" in msg.text or "youtu.be" in msg.text)
async def get_video(message: types.Message):
    url = message.text
    user_links[message.from_user.id] = url

    # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–Ω—Ñ–æ –æ –≤–∏–¥–µ–æ
    ydl_opts = {"quiet": True, "skip_download": True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)

    title = info.get("title", "–í–∏–¥–µ–æ")
    formats = info.get("formats", [])

    # –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    kb = InlineKeyboardMarkup()
    added = set()
    for f in formats:
        if f.get("ext") == "mp4" and f.get("height") and f["height"] <= 720:
            q = f"{f['height']}p"
            if q not in added:
                kb.add(InlineKeyboardButton(f"üé• {q}", callback_data=f"video_{f['height']}"))
                added.add(q)

    kb.add(InlineKeyboardButton("üéµ MP3 (–∞—É–¥–∏–æ)", callback_data="audio"))

    await message.answer(f"–ù–∞—à—ë–ª –≤–∏–¥–µ–æ: <b>{title}</b>\n–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ üëá",
                         parse_mode="HTML", reply_markup=kb)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda call: call.data.startswith("video_") or call.data == "audio")
async def process_choice(call: types.CallbackQuery):
    url = user_links.get(call.from_user.id)
    if not url:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É!")
        return

    await call.message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é...")

    if call.data == "audio":
        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": "download.%(ext)s",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }]
        }
    else:
        height = call.data.split("_")[1]
        ydl_opts = {
            "format": f"bestvideo[height={height}]+bestaudio/best[height<={height}]",
            "outtmpl": "download.%(ext)s"
        }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)

        if call.data == "audio":
            filename = filename.rsplit(".", 1)[0] + ".mp3"

        with open(filename, "rb") as f:
            if call.data == "audio":
                await call.message.answer_audio(f)
            else:
                await call.message.answer_video(f)

        os.remove(filename)

    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –∑–∞–ø—É—Å–∫
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
